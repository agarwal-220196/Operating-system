/*
 File: ContFramePool.C
 
 Author:Sanket Agarwal
 Date  : 02/07/2020
 
 */

/*--------------------------------------------------------------------------*/
/* 
 POSSIBLE IMPLEMENTATION
 -----------------------

 The class SimpleFramePool in file "simple_frame_pool.H/C" describes an
 incomplete vanilla implementation of a frame pool that allocates 
 *single* frames at a time. Because it does allocate one frame at a time, 
 it does not guarantee that a sequence of frames is allocated contiguously.
 This can cause problems.
 
 The class ContFramePool has the ability to allocate either single frames,
 or sequences of contiguous frames. This affects how we manage the
 free frames. In SimpleFramePool it is sufficient to maintain the free 
 frames.
 In ContFramePool we need to maintain free *sequences* of frames.
 
 This can be done in many ways, ranging from extensions to bitmaps to 
 free-lists of frames etc.
 
 IMPLEMENTATION:
 
 One simple way to manage sequences of free frames is to add a minor
 extension to the bitmap idea of SimpleFramePool: Instead of maintaining
 whether a frame is FREE or ALLOCATED, which requires one bit per frame, 
 we maintain whether the frame is FREE, or ALLOCATED, or HEAD-OF-SEQUENCE.
 The meaning of FREE is the same as in SimpleFramePool. 
 If a frame is marked as HEAD-OF-SEQUENCE, this means that it is allocated
 and that it is the first such frame in a sequence of frames. Allocated
 frames that are not first in a sequence are marked as ALLOCATED.
 
 NOTE: If we use this scheme to allocate only single frames, then all 
 frames are marked as either FREE or HEAD-OF-SEQUENCE.
 
 NOTE: In SimpleFramePool we needed only one bit to store the state of 
 each frame. Now we need two bits. In a first implementation you can choose
 to use one char per frame. This will allow you to check for a given status
 without having to do bit manipulations. Once you get this to work, 
 revisit the implementation and change it to using two bits. You will get 
 an efficiency penalty if you use one char (i.e., 8 bits) per frame when
 two bits do the trick.
 
 DETAILED IMPLEMENTATION:
 
 How can we use the HEAD-OF-SEQUENCE state to implement a contiguous
 allocator? Let's look a the individual functions:
 
 Constructor: Initialize all frames to FREE, except for any frames that you 
 need for the management of the frame pool, if any.
 
 get_frames(_n_frames): Traverse the "bitmap" of states and look for a 
 sequence of at least _n_frames entries that are FREE. If you find one, 
 mark the first one as HEAD-OF-SEQUENCE and the remaining _n_frames-1 as
 ALLOCATED.
 
 mark_inaccessible(_base_frame_no, _n_frames): This is similar with get_frames, 
 except that you donâ€™t need to search for the free sequence.  You tell the
 allocator exactly which frame to mark as HEAD-OF-SEQUENCE and how many
 frames after that to mark as ALLOCATED.

 release_frames(_first_frame_no): Check whether the first frame is marked as
 HEAD-OF-SEQUENCE. If not, something went wrong. If it is, mark it as FREE.
 Traverse the subsequent frames until you reach one that is FREE or 
 HEAD-OF-SEQUENCE. Until then, mark the frames that you traverse as FREE.
 
 needed_info_frames(_n_frames): This depends on how many bits you need 
 to store the state of each frame. If you use a char to represent the state
 of a frame, then you need one info frame for each FRAME_SIZE frames.
 
 A WORD ABOUT RELEASE_FRAMES():
 
 When we releae a frame, we only know its frame number. At the time
 of a frame's release, we don't know necessarily which pool it came
 from. Therefore, the function "release_frame" is static, i.e., 
 not associated with a particular frame pool.
 
 This problem is related to the lack of a so-called "placement delete" in
 C++. For a discussion of this see Stroustrup's FAQ:
 http://www.stroustrup.com/bs_faq2.html#placement-delete
 
 */
/*--------------------------------------------------------------------------*/


/*--------------------------------------------------------------------------*/
/* DEFINES */
/*--------------------------------------------------------------------------*/

#define MB *(0x1 << 20) //left shift 1 by 20 bits to get it multiplied by 2raise to that number 

#define KB * (0x1 << 10) // similarly left shift by 10 to get KB 

/*--------------------------------------------------------------------------*/
/* INCLUDES */
/*--------------------------------------------------------------------------*/

#include "cont_frame_pool.H"
#include "console.H"
#include "utils.H"
#include "assert.H"

/*--------------------------------------------------------------------------*/
/* DATA STRUCTURES */
/*--------------------------------------------------------------------------*/

/* -- (none) -- */

/*--------------------------------------------------------------------------*/
/* CONSTANTS */
/*--------------------------------------------------------------------------*/

/* -- (none) -- */

/*--------------------------------------------------------------------------*/
/* FORWARDS */
/*--------------------------------------------------------------------------*/

ContFramePool* ContFramePool::head_of_fame_pool; // this will be used here, since it was static in .H file, we need :: operator 
ContFramePool* ContFramePool::list_of_pool_fames;// similar reason as above


/*--------------------------------------------------------------------------*/
/* METHODS FOR CLASS   C o n t F r a m e P o o l */
/*--------------------------------------------------------------------------*/

/*
defining the meaning of two bits that will be used for bit mapping 

01- frame head
11- frame allocated
00- frame free
10- frame inaccessible 
*/

ContFramePool::ContFramePool(unsigned long _base_frame_no,
                             unsigned long _n_frames,
                             unsigned long _info_frame_no,
                             unsigned long _n_info_frames)
{
    // TODO: IMPLEMENTATION NEEEDED!
    //assert(false);

// first check if the number of frames requested is less than the frame size.
assert(_n_frames <= FRAME_SIZE*8);

// assign the varibales passed on to the constructor to local variables. 
base_frame_no = _base_frame_no;
nframes	      = _n_frames;
nFreeFrames   = _n_frames;
info_frame_no =	_info_frame_no;
n_info_frames = _n_info_frames;

if(info_frame_no==0){//this implementation is same as simple frame
	bitmap = (unsigned char *)(base_frame_no * FRAME_SIZE);
}else {
	bitmap = (unsigned char *)(info_frame_no * FRAME_SIZE);
}

assert((nframes % 8)==0);

//initializing the frames as free frames. thus marking them with 0x00
for (int i=0; (i*8)<(_n_frames*2);i++) {//since we are using 2 bits thus we need to check _n_frames*2;
	bitmap[i]=0x0;// 0x00 defines free
}

if (_info_frame_no==0){
	bitmap[0] = 0x40;//marking the first frame as head of frame
	nFreeFrames--;
}

if (ContFramePool::head_of_fame_pool==NULL){
	ContFramePool::head_of_fame_pool =this;//if no other frame of this pointer then assign the object starting address.
	ContFramePool::list_of_pool_fames =this;
}else{
	ContFramePool::list_of_pool_fames->next_fame_pool = this;//if not then assign the next frame pool its address. 
	ContFramePool::list_of_pool_fames=this;
}

next_fame_pool = NULL;

Console::puts("Frame continuous pool initialized\n");

}

unsigned long ContFramePool::get_frames(unsigned int _n_frames)
{
    // TODO: IMPLEMENTATION NEEEDED!
    //assert(false);

	unsigned int frames_needed = _n_frames;
	unsigned int frame_no = base_frame_no;
	int frame_search =0;//this variable will be used to increment the counter to search for availble frame from bitmap. 
	int frame_available_found=0; //this variable will indicate whether the frame has been found from the bit map or not 
	int bit_1_of_bitmap_i=0;//used to index the array of bitmap
	int bit_2_of_bitmap_j=0;//used to access indivial element of bitmap
	
	if (_n_frames > nFreeFrames){
	
	Console::puts("THESE FRAMES ARE NOT AVAILABLE\n");Console::puts("\n");
	Console::puts("Available free frames =");Console::puti(nFreeFrames);Console::puts("\n");
	assert(_n_frames < nFreeFrames);

}
	
	for (unsigned int i=0;i<(nframes/4);i++){
	unsigned char value_bit_map = bitmap[i];
	unsigned char mask =0xC0; // C0 is 1100 we need two bits as we are using two bits
					
		for (int j=0;j<4;j++){//this for loop will be used for accessin two bits 
			if((bitmap[i] &	mask)==0){
				if (frame_search==1){	
					frames_needed--;//incase if it is the second search then we need to skip the increment of bit_1_of_bitmap_i, thus this loop is required. 

}//if frame_search statement

				else{
					frame_search=1; // for the first frame that is being used, increment the bit_1_bitmap_i to the actual row number. 
					frame_no +=i*4 +j;// same for the column number of bitmap
					bit_1_of_bitmap_i = i;
					bit_2_of_bitmap_j = j;		
					frames_needed--;
}//else of previous if

}//if ->bitmap[i] & mask
	
			else{
				if (frame_search==1){
					frame_no=base_frame_no;//reset frame info since new bit_1 is used by some other frames
					frames_needed = _n_frames;// i.e. continuous memory is not available that is being requested. 
					bit_1_of_bitmap_i = 0;
					bit_2_of_bitmap_j = 0;
					frame_search=0;
}//if frame_search==1			
}//else of previous if->bitmap[i]

			mask = mask>>2; // shift the mask to right by 2 always. 
			if(frames_needed==0){//if all the available frames found as a continuous location
				frame_available_found=1;
				break;
}//if-> frames_needed 0 	

}//for loop with J 
		if(frames_needed==0){
			frame_available_found=1;
			break;
}//frames needed 0
		
}//for loop with I

	
	if (frame_available_found==0){
		Console::puts("THESE FRAMES ARE NOT AVAILABLE for length");Console::puti(_n_frames);Console::puts("\n");	
}//frame_available=0

//setting the sequence 	
	int frame_set = _n_frames;
	unsigned char mask_head=0x40;
	unsigned char mask_invert=0xC0;

	mask_head = mask_head>>(bit_2_of_bitmap_j*2);
	mask_invert = mask_invert>>(bit_2_of_bitmap_j*2);

	bitmap[bit_1_of_bitmap_i] = (bitmap[bit_1_of_bitmap_i] & ~mask_invert) | mask_head;//first clear it and then assign the head

	bit_2_of_bitmap_j++;
	frame_set--;//head frame set thus decrement by 1 
	
	unsigned char mask_2 = 0xC0;
	mask_2 = mask_2>>(bit_2_of_bitmap_j*2);

	while (frame_set>0 && bit_2_of_bitmap_j<4){
	
		bitmap[bit_1_of_bitmap_i] = bitmap[bit_1_of_bitmap_i] | mask_2;

		mask_2 = mask_2>>2;//setting all continuous frames in bitmaps
		frame_set--;
		bit_2_of_bitmap_j++;
}//while loop


	for (int i=bit_1_of_bitmap_i+1;i<nframes/4;i++){
		mask_2 = 0xC0;
		for (int j=0;j<4;j++){//once all entries in a single row are marked, then mark all the next continous entries
			if (frame_set==0){
				break;//this is required to ensure that if requested number of frames don't go above a single row then we do not need any kind of modification
}//if 
			bitmap[i] = bitmap[i] | mask_2;
			mask_2 = mask_2>>2;
			frame_set--;
}// for J

		if (frame_set==0){
			break;

}//if ->frameset

}//for I


	if(frame_search==1){

		nFreeFrames -= _n_frames;// if frame search is successful then reduce the total number of frames from the pool
		return frame_no;

}//if-> frame_search=1 

	else{
		Console::puts("THESE FRAMES ARE NOT AVAILABLE for length");Console::puti(_n_frames);Console::puts("\n");
		return 0;		

}//else

}//get_frames

void ContFramePool::mark_inaccessible(unsigned long _base_frame_no,
                                      unsigned long _n_frames)
{
    // TODO: IMPLEMENTATION NEEEDED!
    //assert(false);

	if ((_base_frame_no<base_frame_no) || ((base_frame_no + nframes) < (_base_frame_no + _n_frames))){

		Console::puts("Index is out of range; unable to mark inaccessible \n ");

}//if 

	else{

		nFreeFrames-=_n_frames;//removing from available free frames
		int difference_bit = (_base_frame_no-base_frame_no)*2;
		int index_i = difference_bit/8;//used to define the row number in the bit map
		int index_j = (difference_bit % 8)/2;//used to define the index of the array.

		int frame_set = _n_frames;

		unsigned char mask_inacces = 0x80;
		unsigned char mask_inverte = 0xC0;

		mask_inacces = mask_inacces>>(index_j*2);//getting to the actual frame.

		mask_inverte = mask_inverte>>(index_j*2);//getting to the actual frame.


		while (frame_set > 0 && index_j < 4){

			bitmap[index_i] =(bitmap[index_i] & (~mask_inverte)) | mask_inacces; //same as before

			mask_inacces= mask_inacces>>2;
			mask_inverte=mask_inverte>>2;
			frame_set--;
			index_j;		

}//while

		for(int i = index_i+1; i<(index_i+_n_frames/4);i++){
			mask_inacces = 0xC0;
			mask_inverte = 0xC0;
			for (int j=0; j<4;j++){
				if (frame_set==0){
					break;
}//if
				bitmap[i] = (bitmap[i] & ~mask_inverte)|mask_inacces;
				mask_inacces = mask_inacces>>2;// same as previous loop
				mask_inverte = mask_inverte>>2;
				frame_set--;
}//for J
				
			if (frame_set==0){
				break;
}//if 
}//for I
}//else 
}// mark_inaccessible 

void ContFramePool::release_frames(unsigned long _first_frame_no)
{
    // TODO: IMPLEMENTATION NEEEDED!
    //assert(false);

	//finding the pool for this.frame

	ContFramePool* pool_current = ContFramePool::head_of_fame_pool;

	while ((pool_current->base_frame_no > _first_frame_no || (pool_current->base_frame_no) + (pool_current->nframes) <= _first_frame_no )){// this loop is requried to go the desired object that is being requested to release the frame. 

	
		if(pool_current->next_fame_pool==NULL){
			Console::puts("No frame found to be released \n");//no frame found
			return;
}//if 
		else{

			pool_current = pool_current->next_fame_pool; //pool frame found
}//else
	
}//while loop


	unsigned char* pointer_bitmap = pool_current->bitmap;// locating the bitmap of that frame

	int difference_bit = ( _first_frame_no - pool_current->base_frame_no)*2;// then using the same logic as in get frames.
	int index_i = difference_bit /8;// locating the row 
	int index_j = (difference_bit % 8)/2;// locating the column number 


	unsigned char mask_head = 0x80;// using the mask index for head
	unsigned char mask_inacc = 0xC0;// using the mask index for inacc


	mask_head = mask_head>>index_j*2;
	mask_inacc = mask_inacc>>index_j*2;


	if (((pointer_bitmap[index_i]^mask_head)&mask_inacc)==mask_inacc){

		pointer_bitmap[index_i] =pointer_bitmap[index_i] & (~mask_inacc);// making the head frame free
		index_j++;
		mask_inacc = mask_inacc>>2;
		pool_current->nFreeFrames++;

		while (index_j<4){// making the consecutive bits free
			if ((pointer_bitmap[index_i]&mask_inacc)==mask_inacc){

				pointer_bitmap[index_i] = pointer_bitmap[index_i] & (~mask_inacc);
				index_j++;
				mask_inacc = mask_inacc>>2;
				pool_current->nFreeFrames++;
}//if

			else{
				return;

}//else
}//while 

		for (int i =index_i+1;i<(pool_current->base_frame_no + pool_current->nframes)/4;i++){
			mask_inacc = 0xC0;
			for(int j = 0; j<4; j++){// if frames are in next row this loop will make them free

				if ((pointer_bitmap[i] & mask_inacc)==mask_inacc){

					pointer_bitmap[i] = pointer_bitmap[i] & (~mask_inacc);
					mask_inacc = mask_inacc >>2;
					pool_current->nFreeFrames++;
}//if for loop J
				else {
					return;
}//else
}//for loop J
}//for loop I		
}//if 
	else{
		Console::puts("It is not head of sequence, cannot release this frame \n");
}//else

}//release frames

unsigned long ContFramePool::needed_info_frames(unsigned long _n_frames)
{
    // TODO: IMPLEMENTATION NEEEDED!
 //   assert(false);
	return (_n_frames*2)/(8*4 KB) + ((_n_frames*2)%(8*4 KB) >0?1:0);

}
